{"majorversion": 3, "classmap": {"ClipBoard": {"name": "ClipBoard", "constructors": [{"description": "The ClipBoard class is desinged to be a node plugin and a wrapper over the flash movie\nto copy text contents to the OS clipboard. The class will place the flash movie below the given\nnode so that a user action can trigger the copy of contents to the OS clip board using\nFlash's System.setClipboard method. Starting from flash 10, the clipboard can be set only\noff a user initiated event. So the JS class shall only set the string to be copied and will\nallow the flash movie's event to capture the user action and set the clipboard contents"}], "namespace": "", "module": "clipboard-plugin", "events": {"domainChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "domainChange", "description": "Fires when the value for the configuration attribute 'domain' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "movieloadedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "movieloadedChange", "description": "Fires when the value for the configuration attribute 'movieloaded' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "moviepathChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "moviepathChange", "description": "Fires when the value for the configuration attribute 'moviepath' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pageChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pageChange", "description": "Fires when the value for the configuration attribute 'page' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "globalChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "globalChange", "description": "Fires when the value for the configuration attribute 'global' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "idChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "idChange", "description": "Fires when the value for the configuration attribute 'id' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"domain": {"type": "String", "description": "The domain value that should be allowed in the flash movie", "guessedname": "domain", "guessedtype": "property"}, "moviepath": {"type": "String", "description": "The path to the swf movie. The movie might be set up on various domain. The movie path\ncan be a URL or a file path", "guessedname": "moviepath", "guessedtype": "property"}, "global": {"type": "Object", "description": "If there are custom global name space that the flash callback function has to be called on,\nthat can be passed here", "guessedname": "global", "guessedtype": "property"}, "id": {"type": "String", "description": "The identifier for the flash movie", "guessedname": "id", "guessedtype": "property"}, "movieloaded": {"type": "Boolean", "description": "The movieloaded attribute will be set for the given node when the flash movie is ready", "guessedname": "movieloaded", "guessedtype": "property"}, "page": {"type": "Node", "description": "The page attribute represents the topmost node where the flash movie will be embeded only\nonce. This is needed so that even if there are multiple copy nodes, we will use only a\none flash movie\nmy default, the page attribute is set to the page body", "guessedname": "page", "guessedtype": "property"}}, "methods": {"_flashInterface": {"return": {"type": "Void", "description": ""}, "description": "The main method that is set on the \"global\" that will be the callback interface between\nthe flash movie and javascript. All the flash movie events that are trapped and are of\ninterest will be passed into the falsh interface. Based on the type of event, the\nmethod will dispatch the event to the most suitable node or handler", "private": "", "params": [{"type": "String", "name": "ev", "description": "  The event String"}, {"type": "Object", "name": "a", "description": "  The flash call back object"}], "guessedname": "_flashInterface", "guessedtype": "function"}, "hide": {"return": {"type": "Void", "description": ""}, "description": "Method to hide the flash movie once the copy has been done", "guessedname": "hide", "guessedtype": "function"}, "show": {"return": {"type": "Void", "description": ""}, "description": "Method to align the flash movie on top of the node so that it can trap the user events", "guessedname": "show", "guessedtype": "function"}, "_destructor": {"guessedname": "_destructor", "todo": "Not calling this destructor because its a node plugin and every time the node is destroyed\nit will destroy the clipboard, need to check this further", "description": "Destructor method to clean up the flash movie clipboard", "private": "", "guessedtype": "function"}, "removeEvent": {"return": {"type": "Boolean", "description": "TRUE if success, FALSE if failure"}, "params": [{"type": "String", "name": "n", "description": "  The name of the event"}], "description": "Method to remove the event on the flash movie. This method will makes sure that the\nevent is removed only if all the node instances using the flash movie are free of any\nevents binding. If there are any nodes that are listening to the flash movie event, then\ntill a remove event for that node is called, the events will not be removed from the\nflash movie", "guessedname": "removeEvent", "guessedtype": "function"}, "setAttribute": {"params": [{"type": "String", "name": "type", "description": "  The type of attribute to be set"}, {"type": "String", "name": "value", "description": "  The attribute value to be set"}], "description": "The setAttribute method is trapped by the plugin and if the value set is copy, then we\nshow the flash movie and then set the value to be copied. Now, when the user will\ninitiate the event on the flash movie, we will set the contents of the keyboard", "private": ""}, "focus": {"return": {"type": "Void", "description": ""}, "description": "Alias method to the flash movie focus method", "guessedname": "focus", "guessedtype": "function"}, "initializer": {"return": {"type": "Void", "description": ""}, "params": [{"type": "Object", "name": "config", "description": "  the configuration attributes"}], "description": "Initializer function to set up the flash movie if not already present on the \"page\",\nsetup the flash - js interface, and align the movie to the host node", "guessedname": "initializer", "guessedtype": "function"}, "setEvent": {"return": {"type": "Boolean", "description": "TRUE if success, FALSE if failure"}, "params": [{"type": "String", "name": "n", "description": "  The flash movie Event name. Refer the \n<a href='http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/flash/events/Event.html'\ntarget=_blank>the adobe Action-script 3 flash events manual</a> for all the events that\ncan be assigned to the flash movie."}, {"type": "Function", "name": "cb", "description": "  The callback function to be called when the flash movie event occurs"}, {"type": "Boolean", "name": "docopy", "description": "  The boolean flag to decide whether the event you assign when triggered\nmust assign the copy text to the OS clipboard. Default is FALSE"}], "description": "Method to set an event on the flash movie. The set event call maintains an event cache\nof all the events assigned on the flash movie for a given node. Since there is only one\nflash movie on the page, the setEvent can maintain only a single event per node on the\nflash movie.", "guessedname": "setEvent", "guessedtype": "function"}, "_getFlashMovieObj": {"guessedname": "_getFlashMovieObj", "params": [{"type": "Object", "name": "d", "description": "  The dimensions object got from getHostDimensions"}, {"type": "String", "name": "f", "description": "  The global call back function name"}], "description": "Method to create the flash object markup, create the Object or Embed element and append it\nto the \"page\"", "private": "", "guessedtype": "function"}, "_alignMovie": {"return": {"type": "Node", "description": "The bounding box node"}, "description": "Method to align the movie to the given host with the specified dimensions", "private": "", "params": [{"type": "Object", "name": "d", "description": "  The dimensions object got from getHostDimensions"}, {"type": "Node", "name": "h", "description": "  The host node"}], "guessedname": "_alignMovie", "guessedtype": "function"}, "copy": {"params": [{"type": "String", "name": "str", "description": "  the string to be copied"}], "description": "Method to set the copy string into to movie. This method has to be called before the\nflash movie accepts the event to set the copy string to clip board. This method can\nalso be called by using node.setAttribute(\"copy\", \"this is a string\" );", "guessedname": "copy", "guessedtype": "function"}, "getHostDimensions": {"return": {"type": "Object} { w : width, h : height, xy : NodeXY", "description": ""}, "description": "Method to get the dimensions of the host node so that the flash movie can be\npainted across the node.", "guessedname": "getHostDimensions", "guessedtype": "function"}, "_getNodeSize": {"guessedname": "_getNodeSize", "params": [{"type": "Node", "name": "node", "description": " The node for which the size needs to be computed"}], "description": "Return the size of the given node including border, padding and margin.", "private": "", "guessedtype": "function"}}, "extends": "Y.Plugin.Base", "superclass": "Y.Plugin.Base", "file": "gallery-clipboard.js", "shortname": "ClipBoard", "properties": {"OBJECT_TEMPLATE": {"description": "Template for embedding the flash movie in the object tag. Mainly for IE browsers", "private": "", "static": "", "guessedname": "OBJECT_TEMPLATE", "guessedtype": "property", "type": "String"}, "SWF_MOVIE_NAME": {"description": "Name of the flash movie", "private": "", "static": "", "guessedname": "SWF_MOVIE_NAME", "guessedtype": "property", "type": "String"}, "EMBED_TEMPLATE": {"description": "Template for embedding the flash movie in the embed tag. For most other browsers", "private": "", "static": "", "guessedname": "EMBED_TEMPLATE", "guessedtype": "property", "type": "String"}}, "description": "The ClipBoard class is desinged to be a node plugin and a wrapper over the flash movie\nto copy text contents to the OS clipboard. The class will place the flash movie below the given\nnode so that a user action can trigger the copy of contents to the OS clip board using\nFlash's System.setClipboard method. Starting from flash 10, the clipboard can be set only\noff a user initiated event. So the JS class shall only set the string to be copied and will\nallow the flash movie's event to capture the user action and set the clipboard contents"}}, "version": "1.0.0", "modules": {"clipboard-plugin": {"description": "The Clipboard plugin provides you an interface to set up a copy to OS clipboard using a Flash\nmovie bridge. The ClipBoard class is a node plugin, so any YUI3 node can be given the ability\nto set the content to the clipboard triggered off a by an event.", "submodules": [], "classlist": ["ClipBoard"], "author": "Subramanyan Murali", "filelist": ["clipboard.js", "gallery-clipboard.js"], "subdata": {}, "requires": "yahoo, node, event, plugin, substitute", "name": "clipboard-plugin"}}, "filemap": {"clipboard.js": {"classlist": [], "name": "clipboard.js", "module": "clipboard-plugin"}, "gallery-clipboard.js": {"classlist": ["ClipBoard"], "name": "gallery-clipboard.js", "module": "clipboard-plugin"}}}